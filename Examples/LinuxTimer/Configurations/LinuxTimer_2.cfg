// -------------------------------------------------------------------------------------------------------
// Web Introspection Service and Auxiliary State Machine
// -------------------------------------------------------------------------------------------------------
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "../Resources/HTTP/"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
           
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
           }
}

    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
           
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
       }   
    }
}
// -------------------------------------------------------------------------------------------------------
// Main Application
// -------------------------------------------------------------------------------------------------------
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer

        +Clock = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 500
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }

        +STM32Processor = {
            Class = IOGAM
            InputSignals = {
                MessageRxTime = {
                    DataSource = STM32
                }
                MessageTxTime = {
                    DataSource = STM32
                }
                rotor_position_steps = {
                    DataSource = STM32
                }
                encoder_counter = {
                    DataSource = STM32
                }
                motor_ImpuleAmplitude = {
                    DataSource = STM32
                }
                motor_Direction = {
                    DataSource = STM32
                }
                motor_Acceleration = {
                    DataSource = STM32
                }
                break_Control_Loop = {
                    DataSource = STM32
                }
                state = {
                    DataSource = STM32
                }
                encoder_position = {
                    DataSource = STM32
                }
            }
            OutputSignals = {
                MessageRxTime = {
                     DataSource = STM32FileWriter
		            Type = uint64
                }
                MessageTxTime = {
                     DataSource = STM32FileWriter
		            Type = uint64
                }
                rotor_position_steps = {
                    DataSource = STM32FileWriter
		            Type = int32
                }
                encoder_counter = {
                    DataSource = STM32FileWriter
		            Type = uint32
                }
                motor_ImpuleAmplitude = {
                    DataSource = STM32FileWriter
                    Type = int32
                }
                motor_Direction = {
                    DataSource = STM32FileWriter
                    Type = uint8
                }
                motor_Acceleration = {
                    DataSource = STM32FileWriter
                    Type = int32
                }
                break_Control_Loop = {
                    DataSource = STM32FileWriter
                    Type = uint8
                }
                state = {
                    DataSource = STM32FileWriter
                    Type = uint8
                }
                encoder_position = {
                    DataSource = STM32FileWriter
		            Type = float32
                }
            }
        }
        
        +InvertedGAM = {
            Class = InvertedPendulumGAM
            InputSignals = {  
                encoder_counter = {
                    DataSource = STM32
                }
                rotor_position_steps = {
                    DataSource = STM32
                }
            }
            OutputSignals = {               
                motor_ImpuleAmplitude = {
                    DataSource = STM32
		            Type = int32
                }
                motor_Direction = {
                    DataSource = STM32
		            Type = uint8
                }
                motor_Acceleration = {
                    DataSource = STM32
		            Type = int32
                }
                break_Control_Loop = {
                    DataSource = STM32
		            Type = uint8
                }
                state = {
                    DataSource = STM32
		            Type = uint8
                }
                encoder_position = {
                    DataSource = STM32
		            Type = float32
                }
                
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	} 
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        } 

        +STM32FileWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000000
            CPUMask = 0xFE
            StackSize = 10000000 
            Filename = "control_data_logs.csv"
            Overwrite = "yes"
            FileFormat = "csv"
            CSVSeparator = ","
            StoreOnTrigger = 0
            Signals = {
                MessageRxTime = {
                    Type = uint64
                }
                MessageTxTime = {
                    Type = uint64
                }
                RxBufferOccupancy = {
                    Type = uint32
                }
                rotor_position_steps = {
                    Type = int32
                }
                encoder_counter = {
                    Type = uint32
                }
                motor_ImpuleAmplitude = {
                    Type = int32
                }
                motor_Direction = {
                    Type = uint8
                }
                motor_Acceleration = {
                    Type = int32
                }
                break_Control_Loop = {
                    Type = uint8
                }
                state = {
                    Type = uint8
                }
                encoder_position = {
		            Type = float32
                }
            }
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource

        }  
    }
    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Clock InvertedGAM STM32Processor}
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
