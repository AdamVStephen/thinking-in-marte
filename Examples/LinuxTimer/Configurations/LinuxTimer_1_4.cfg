// -------------------------------------------------------------------------------------------------------
// Main Application : As 1_3 but with a Web server to demonstrate the introspection view of components
//
// Source Code Reference : $MARTe2_Components_DIR/Source/Components/DataSources/LinuxTimer
// 
// See also: LinuxTimer_1_{1..N}.cfg for variations of other LinuxTimer behaviours.
//
// RUN Default: m2 LinuxTimer_1_4.cfg -m StateMachine:START 
//
// Expected output :
// 
// With Phase=0 in the first Timer and Phase=500,000 in the second
// 
// [Information - LoggerBroker.cpp:152]: Counter [0:0]:1
// [Information - LoggerBroker.cpp:152]: Time [0:0]:0
// [Information - LoggerBroker.cpp:152]: AbsoluteTime [0:0]:114625564244
// [Information - LoggerBroker.cpp:152]: DeltaTime [0:0]:435756
// [Information - LoggerBroker.cpp:152]: TrigRephase [0:0]:0
// 
// [Information - LoggerBroker.cpp:152]: Counter_B [0:0]:1
// [Information - LoggerBroker.cpp:152]: Time_B [0:0]:1000000
// [Information - LoggerBroker.cpp:152]: AbsoluteTime_B [0:0]:114626064436
// [Information - LoggerBroker.cpp:152]: DeltaTime_B [0:0]:1000000
// [Information - LoggerBroker.cpp:152]: TrigRephase_B [0:0]:0
//
// Note that (114626064436 - 114625564244) = 500192  (jitter due to running untuned on WSL)
// -------------------------------------------------------------------------------------------------------
//
// -------------------------------------------------------------------------------------------------------
// Web Introspection Service and Auxiliary State Machine
// -------------------------------------------------------------------------------------------------------
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
//     +ResourcesHtmlDemo = {
//         Class = HttpDirectoryResource
//         BaseDir = "../Resources/HTTP/"
//     } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTO_AB = {
            Class = Message
            Destination = StateMachine
            Function = GOTO_AB
            Mode = ExpectsReply
        }
        +GOTO_BA = {
            Class = Message
            Destination = StateMachine
            Function = GOTO_BA
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
	+RESET= {
            Class = Message
            Destination = StateMachineError
            Function = RESET 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "STATE_BA"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State_BA"
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +STATE_AB = {
        Class = ReferenceContainer
        +GOTO_BA = {
            Class = StateMachineEvent
            NextState = "STATE_BA"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State_BA
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +STATE_BA = {
        Class = ReferenceContainer
           
        +GOTO_AB = {
            Class = StateMachineEvent
            NextState = "STATE_AB"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State_AB 
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
           }
}

    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
           
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "STATE_AB"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToABMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State_AB 
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
       }   
    }
}
//

$TestApp = {
    Class = RealTimeApplication
	+Data = { 
        Class = ReferenceContainer
        DefaultDataSource = LoggerDataSource
	// Timer_A has zero phase
        +Timer_A = {
            Class = LinuxTimer
            SleepNature = "Default"
	    Phase = 0
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                AbsoluteTime = {
                    Type = uint64
                }
                DeltaTime = {
                    Type = uint64
                }
                TrigRephase = {
                    Type = uint8
                }
            }
        } 
	+Timer_B = {
            Class = LinuxTimer
            SleepNature = "Default"
	    Phase = 500000
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                AbsoluteTime = {
                    Type = uint64
                }
                DeltaTime = {
                    Type = uint64
                }
                TrigRephase = {
                    Type = uint8
                }
            }
	}
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource

        }  
    }
    +Functions = {
        Class = ReferenceContainer

        +Clock_A = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer_A
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = Timer_A
                    Type = uint32
                }
                AbsoluteTime = {
                    Type = uint64
                    DataSource = Timer_A
                }
                DeltaTime = {
                    Type = uint64
                    DataSource = Timer_A
                }
                TrigRephase = {
                    Type = uint8
                    DataSource = Timer_A
                }
            }
            OutputSignals = {
                Counter = {
//                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
 //                   DataSource = DDB1
                    Type = uint32
                }
                AbsoluteTime = {
                    Type = uint64
                }
                DeltaTime = {
                    Type = uint64
                }
                TrigRephase = {
                    Type = uint8
                }
            }
        }
+Clock_B = {
        
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer_B
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = Timer_B
                    Type = uint32
                }
                AbsoluteTime = {
                    Type = uint64
                    DataSource = Timer_B
                }
                DeltaTime = {
                    Type = uint64
                    DataSource = Timer_B
                }
                TrigRephase = {
                    Type = uint8
                    DataSource = Timer_B
                }
            }
            OutputSignals = {
                Counter_B = {
//                    DataSource = DDB1
                    Type = uint32
                }
                Time_B = {
 //                   DataSource = DDB1
                    Type = uint32
                }
                AbsoluteTime_B = {
                    Type = uint64
                }
                DeltaTime_B = {
                    Type = uint64
                }
                TrigRephase_B = {
                    Type = uint8
                }
            }
    }
}
    +States = {
        Class = ReferenceContainer
        +State_AB = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Clock_A}
                }
		+Thread2 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Clock_B}
                }
            }
        }        
	+State_BA = {

            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Clock_B}
                }
		+Thread2 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Clock_A}
                }
            }
}

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
